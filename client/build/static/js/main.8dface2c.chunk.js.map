{"version":3,"sources":["components/MultiSelect.js","components/DatePicker.js","components/InfoTooltips/OverlayInfo.js","components/InfoTooltips/DateTooltip.js","components/InfoTooltips/MultiSelectTooltip.js","API.js","components/UploadImageForm.js","images/position.svg","images/rar.svg","components/Markers.js","App.js","index.js"],"names":["MultiSelect","React","useState","selected","setSelected","value","label","options","setOptions","handleCreate","useCallback","inputValue","newValue","toLowerCase","className","isClearable","onSortEnd","array","from","to","oldIndex","newIndex","slice","length","splice","console","log","map","i","isMulti","onChange","selectedOptions","onCreateOption","placeholder","closeMenuOnSelect","Datepicker","props","Date","locale","onCalendarClose","resultISO","formatISO","getDataFromDate","OverlayInfo","tooltipOpen","setTooltipOpen","style","textDecoration","color","href","id","Tooltip","placement","isOpen","target","toggle","DateTooltip","MultiSelectTooltip","toolOpen","setToolOpen","API_URL","window","location","hostname","a","fetch","response","json","getFilesProject","prosjekt","getPictures","filename","text","then","data","getLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","res","sendFile","entry","method","body","catch","error","registerPlugin","FilePondPluginImagePreview","FilePondPluginFileValidateType","UploadImageForm","files","setFiles","userFile","GPSAltitude","GPSImgDirection","imageName","imageType","captureDate","handleSubmit","event","formData","FormData","preventDefault","set","file","imageFile","get","type","name","lastModifiedDate","exifr","gps","parse","gpsAlt","gpsDirection","kvithamCoord","mandalCoord","append","delete","Form","onSubmit","FormGroup","Label","for","Input","required","multiple","FormText","onupdatefiles","acceptedFileTypes","labelIdle","check","Button","positionMarker","L","icon","iconUrl","positionUrl","iconSize","iconAnchor","popupAnchor","gpsDirectionMarker","compass","projectOptions","polygonE6KAA","polygonE18RD","polygonE39M","App","state","positionCoord","haveUsersLocation","zoom","selectedOption","changeDate","dateValues","images","urls","handleChange","setState","getPositionOfUser","dateChanged","getImages","this","Map","center","TileLayer","attribution","url","onClick","Marker","Popup","image","rotationAngle","prosjektOmrade","parsell","kategori","src","alt","_id","Polygon","onclick","positions","Card","CardTitle","menuColor","CardText","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dface2c.chunk.js","sourcesContent":["import React, { useCallback, useState} from 'react';\nimport CreatableSelect from 'react-select/creatable';\nimport './MultiSelect.css';\n\n\nfunction arrayMove(array, from, to) {\n    array = array.slice();\n    array.slice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n\nexport default function MultiSelect() {\n    const [selected, setSelected] = React.useState([]);\n    const [options, setOptions] = useState([\n        {value: 'vvs', label: 'VVS'},\n        {value: 'bro', label: 'Bro'},\n        {value: 'vei', label: 'Vei'},\n        {value: 'ruh', label: 'RUH'},\n        {value: 'parsellnr', label: 'Parsellnummer'},\n        {value: 'marked', label: 'Marked/Annonsebilder'},\n    ]);\n\n    const onChange = selectedOptions => setSelected(selectedOptions);\n\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        const newValue = arrayMove(selected, oldIndex, newIndex);\n        setSelected(newValue);\n        console.log('Values sorted:', newValue.map(i => i.value));\n    };\n\n    const handleCreate = useCallback(\n        (inputValue) => {\n            const newValue = {value: inputValue.toLowerCase(), label: inputValue};\n            setOptions([...options, newValue]);\n            setSelected(newValue);\n        },\n        [options]\n    );\n\n    return(\n        <CreatableSelect\n            className=\"multi-select\"\n            isClearable\n            onSortEnd={onSortEnd}\n            isMulti\n            value={selected}\n            options={options}\n            onChange={onChange}\n            onCreateOption={handleCreate}\n            placeholder=\"velg kategori\"\n            closeMenuOnSelect={false}\n        />\n    )\n}","import React, { useState } from 'react';\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\nimport { formatISO } from 'date-fns'\n\nconst Datepicker = (props) => {\n  const [value, onChange] = useState([new Date(), new Date()]);\n\n  console.log(value);\n\n  const getDataFromDate = () => {\n    let resultISO = [];\n    resultISO = formatISO(value[0]);\n    resultISO = formatISO(value[1]);\n\n    console.log(resultISO);\n\n    /*\n    getDateRange(value)\n      .then(props.images);*/\n  }\n\n  return (\n    <div>\n      <DateRangePicker\n        onChange={onChange}\n        value={value}\n        locale\n        onCalendarClose={getDataFromDate()}\n      />\n    </div>\n  );\n};\n\nexport default Datepicker;\n","import React, { useState } from 'react';\nimport { Tooltip } from 'reactstrap';\n\nconst OverlayInfo = (props) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <div>\n      <p>Velg prosjekt: <span style={{textDecoration: \"underline\", color:\"blue\"}} href=\"#\" id=\"Prosjekt\">(info)</span></p>\n      <Tooltip placement=\"top\" isOpen={tooltipOpen} target=\"Prosjekt\" toggle={toggle}>\n        Velg prosjekt du vil sortere bildefilene for\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default OverlayInfo;","import React, { useState } from 'react';\nimport { Tooltip } from 'reactstrap';\n\nconst DateTooltip = (props) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <div>\n      <p>Sorter på dato (fra-til): <span style={{textDecoration: \"underline\", color:\"blue\"}} href=\"#\" id=\"Date\">(info)</span></p>\n      <Tooltip placement=\"top\" isOpen={tooltipOpen} target=\"Date\" toggle={toggle}>\n        Velg et datointervall du ønsker å sortere bildefilene på\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default DateTooltip;","import React, { useState } from 'react';\nimport { Tooltip } from 'reactstrap';\n\nconst MultiSelectTooltip = (props) => {\n  const [toolOpen, setToolOpen] = useState(false);\n\n  const toggle = () => setToolOpen(!toolOpen);\n\n  return (\n    <div>\n      <p>Sorter på kategorier: <span style={{textDecoration: \"underline\", color:\"blue\"}} href=\"#\" id=\"Multi\">(info)</span></p>\n      <Tooltip placement=\"top\" isOpen={toolOpen} target=\"Multi\" toggle={toggle}>\n        Velg kategori/er du ønsker å sortere bildefilene på\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default MultiSelectTooltip;","const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:1337/api/images' : 'another-adress';\n\n// Fetches all data\nexport async function getImages() {\n    const response = await fetch(API_URL);\n    return response.json();  \n}\n// Sorts on one project\nexport async function getFilesProject(prosjekt) {\n  console.log(prosjekt);\n  const response = await fetch(`${API_URL}/${prosjekt}`);\n  return response.json();\n}\n// Fetches the pictures\nexport async function getPictures(filename) {\n  const response = await fetch(`${API_URL}/image/${filename}`);\n  return response.text().then(data => console.log(data));\n}\n// Sorts on DateRange\nexport async function getDateRange(value) {\n  console.log(value);\n  const response = await fetch(`${API_URL}/daterange/${value}`);\n  return response.json();\n}\n\n// Gets the position of user\nexport function getLocation() {\n  return new Promise((resolve) => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        resolve({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      },\n      () => {\n        resolve(\n          fetch(\"https://ipapi.co/json\")\n            .then((res) => res.json())\n            .then((location) => {\n              return {\n                lat: location.latitude,\n                lng: location.longitude,\n              };\n            })\n        );\n      }\n    );\n  });\n}\n\n// Headeren må være tom\n// POST: the new entry data\nexport function sendFile(entry){\n    return fetch(API_URL, {\n        method: 'POST',\n        body: entry,\n    })\n    .then(res => res.json())\n    .then(data => console.log(data))\n    .catch(error => {console.error(error)});\n}","import React, {useState} from \"react\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\nimport exifr from \"exifr\";\nimport \"./UploadImageForm.css\";\nimport { sendFile } from \"../API\";\n\n// Import React FilePond\nimport { FilePond, registerPlugin } from \"react-filepond\";\nimport \"filepond/dist/filepond.min.css\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\n// Register the plugins\nregisterPlugin(FilePondPluginImagePreview, FilePondPluginFileValidateType);\n\n\n\n/* Må legge til resten av prosjektene og kategorier som er ønsket. \n    Til jeg finne ut hvordan man kan hente dem fra databasen inn i listen...??\n*/\n\nconst UploadImageForm = () => {\n  const [files, setFiles] = useState([]);\n\n  const fileTypesAccepted = [\"image/jpeg\", \"image/jpg\", \"image/png\"];\n\n  const userFile = {\n    latitude: \"\",\n    longitude: \"\",\n    GPSAltitude: \"\",\n    GPSImgDirection: \"\",\n    imageName: \"\",\n    imageType: \"\",\n    captureDate: Date,\n  };\n\n  const handleSubmit = async (event) => {\n    //Henter svarene fra formen\n    const formData = new FormData(event.target);\n    //error handler(?)\n    event.preventDefault();\n    //Putter inn fil fra filepond inn i bildefil også henter ut denne\n    formData.set(\"bildefil\", files[0].file);\n    const imageFile = formData.get(\"bildefil\");\n\n    //Lagrer alt som trengs fra Form og bildefil\n    userFile.imageType = imageFile.type;\n    userFile.imageName = imageFile.name;\n\n    //Lagrer dato fra lastModifiedDate -> er den nøyaktig nok??\n    userFile.captureDate = new Date(imageFile.lastModifiedDate);\n\n    //Sjekke om det finnes gps-verdier i filen\n    let exifrOutput = await exifr.gps(imageFile).catch(console.error)\n    \n    //Henter EXIFR verdiene fra funksjonen som parser\n    if (exifrOutput != null){\n      userFile.latitude = (await exifr.gps(imageFile)).latitude;\n      userFile.longitude = (await exifr.gps(imageFile)).longitude;\n      //må hente ut disse for så å hente ut verdiene fra arrayen\n      const gpsAlt = await exifr.parse(imageFile, [\"GPSAltitude\"]);\n      const gpsDirection = await exifr.parse(imageFile, [\"GPSImgDirection\"]);\n\n      userFile.GPSAltitude = gpsAlt.GPSAltitude;\n      userFile.GPSImgDirection = gpsDirection.GPSImgDirection;\n\n    } else {\n      console.log(\"Det finnes ikke \");\n\n      // Sjekke hvilket prosjekt det er\n      if (formData.get(\"prosjekt\") === \"E6 Kvithammar - Åsen\") {\n        const kvithamCoord = [63.490445, 10.873416];\n\n        userFile.latitude = kvithamCoord[0];\n        userFile.longitude = kvithamCoord[1];\n      }\n      if(formData.get(\"prosjekt\") === \"E39 Mandal\") {\n        const mandalCoord = [58.028566, 7.523384];\n\n        userFile.latitude = mandalCoord[0];\n        userFile.longitude = mandalCoord[1];\n      }\n    }\n\n    formData.append(\"imageType\", userFile.imageType);\n    formData.append(\"imageName\", userFile.imageName);\n    formData.append(\"latitude\", userFile.latitude);\n    formData.append(\"longitude\", userFile.longitude);\n    formData.append(\"GPSAltitude\", userFile.GPSAltitude);\n    formData.append(\"GPSImgDirection\", userFile.GPSImgDirection);\n    formData.append(\"captureDate\", userFile.captureDate);\n\n    // Sletter filepond som er tom\n    formData.delete(\"filepond\");\n\n    console.log(\"Structure of formdata\" + [...formData]);\n\n    //Sends userFile to API -> DB\n    try {\n      await sendFile(formData);\n    } catch (error) {\n      console.error(error);\n    }\n\n  };\n\n\n  return (\n    <Form\n      onSubmit={handleSubmit}\n      className=\"body\"\n    >\n      <FormGroup>\n        <Label for=\"prosjekt\">Prosjekt</Label>\n        <Input\n          type=\"select\"\n          name=\"prosjekt\"\n          id=\"prosjekt\"\n          placeholder=\"velg prosjekt\"\n        >\n          <option>E6 Kvithammar - Åsen</option>\n          <option>E39 Mandal</option>\n        </Input>\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"parsell\">Parsellnummer</Label>\n        <Input\n          type=\"number\"\n          name=\"parsell\"\n          id=\"parsell\"\n          placeholder=\"Parselnummer\"\n          required\n        />\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"kategori\">Kategori</Label>\n        <Input type=\"select\" name=\"kategori\" id=\"kategori\" multiple>\n          <option>Elektro</option>\n          <option>Fjellsikring</option>\n          <option>Fundamentering</option>\n          <option>Geomatikk</option>\n          <option>Konstruksjon</option>\n          <option>Riving og sanering</option>\n          <option>Tunnel</option>\n          <option>Vann og avløp</option>\n          <option>Veg</option>\n          <option>Markedsbilder</option>\n        </Input>\n        <FormText color=\"muted\">\n          Velg flere kategorier ved å holde inne \"command\" eller \"Alt\" på tastaturet.\n        </FormText>\n      </FormGroup>\n      <FormGroup>\n        <FilePond \n         files={files}\n         onupdatefiles={setFiles}\n         name=\"filepond\"\n         id=\"filepond\"\n         acceptedFileTypes={fileTypesAccepted}\n         labelIdle='Dra & Slippe filene eller <span class=\"filepond--label-action\"> Bla Gjennom </span>'\n        />\n      </FormGroup>\n      <FormGroup check>\n        <Label check>\n          <Input type=\"checkbox\" required /> Godta at Hæhre kan bruke bildene\n        </Label>\n      </FormGroup>\n      <Button type=\"submit\" color=\"info\">\n        Last opp\n      </Button>\n    </Form>\n  );\n};\n\nexport default UploadImageForm;\n","export default __webpack_public_path__ + \"static/media/position.5085c436.svg\";","export default __webpack_public_path__ + \"static/media/rar.be30cbbf.svg\";","import L from 'leaflet';\nimport positionUrl from '../images/position.svg';\nimport compass from '../images/rar.svg';\n\nexport const positionMarker = new L.icon({\n    iconUrl: positionUrl,\n    iconSize: [35, 51],\n    iconAnchor: [17, 51],\n    popupAnchor: [2, -40]\n});\n\nexport const gpsDirectionMarker = new L.icon({\n    iconUrl: compass,\n    iconSize: [20, 20],\n});","import React, {Component} from 'react';\nimport {Map, TileLayer, Marker, Popup, Polygon} from 'react-leaflet';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport {Card, CardText, CardTitle} from 'reactstrap';\nimport Select from \"react-select\";\nimport Control from 'react-leaflet-control';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\nimport MultiSelect from './components/MultiSelect';\n//import DropZone from './components/DropZone';\nimport Datepicker from './components/DatePicker';\nimport OverlayInfo from './components/InfoTooltips/OverlayInfo';\nimport DateTooltip from './components/InfoTooltips/DateTooltip';\nimport MultiSelectTooltip from './components/InfoTooltips/MultiSelectTooltip';\nimport UploadImageForm from './components/UploadImageForm';\nimport { positionMarker, gpsDirectionMarker} from './components/Markers';\nimport './App.css';\nimport 'leaflet-rotatedmarker';\n\nimport { getImages, getLocation, getFilesProject, getPictures } from './API';\n\nconst projectOptions = [\n  {value: [63.551440, 10.933473], label: 'E6 Kvithammar - Åsen'},\n  {value: [58.093886,7.644329], label: 'E39 Mandal'},\n  {value: [59.001439, 9.613338], label: 'E18 Rugtvedt Dørdal'}\n  //Legge til resterende\n];\n\nconst polygonE6KAA = [\n  [63.490113, 10.881942],\n  [63.539078, 10.784397],\n  [63.611563, 11.037967],\n  [63.604848, 11.073352],\n];\n\nconst polygonE18RD = [\n  [59.034210, 9.695156],\n  [59.042688, 9.653614],\n  [58.972837, 9.452311],\n  [58.953720, 9.486643],\n];\n\nconst polygonE39M = [\n  [58.022543, 7.496523],\n  [58.038903, 7.469057],\n  [58.109921, 7.638652],\n  [58.105165, 7.807159],\n  [58.089601, 7.804134]\n];\n\nclass App extends Component {\n \n  state = {\n    location: {\n      lat: 63.430515,\n      lng: 10.395053,\n    },\n    positionCoord: {\n      lat: 0,\n      lng: 0,\n    },\n    haveUsersLocation: false,\n    zoom: 5,\n    selectedOption: null,\n    changeDate: false,\n    dateValues: [new Date(), new Date()],\n    images: [],\n    urls: [],\n  }\n\n  componentDidMount() {\n    getImages()\n      .then(images => {\n        this.setState({\n          images: images.images\n        });\n      });\n    \n  }\n\n\n  handleChange = (selectedOption) => {\n    this.setState({\n      location: {\n        lat: selectedOption.value[0],\n        lng: selectedOption.value[1]\n      },\n      selectedOption,\n      zoom: 11,\n    });\n\n    // SORTERER PÅ PROSJEKT\n    getFilesProject(selectedOption.label)\n    .then(images => {\n      this.setState({\n        images: images.files\n      });\n    });\n  };\n\n  getPositionOfUser = () =>{\n    getLocation()\n    .then(positionCoord => {\n      this.setState({\n        positionCoord,\n        haveUsersLocation: true,\n      });\n    });\n  }\n\n  dateChanged = (value) => {\n    console.log(value);\n\n    this.setState({\n      changeDate: true\n    });\n\n\n  }\n  \n\n  render(){\n    const position = [this.state.location.lat, this.state.location.lng];\n    const { selectedOption, positionCoord } = this.state;\n\n    return (\n\n      <div className=\"app\">\n        <Map className=\"map\" center={position} zoom={this.state.zoom}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Control position=\"topleft\">\n            <button onClick={this.getPositionOfUser}>\n              Min <br></br>Posisjon\n            </button>\n          </Control>\n          {\n            this.state.haveUsersLocation ? (\n              <Marker \n                position={positionCoord} \n                icon={positionMarker}>\n                <Popup>Din posisjon:)</Popup>\n              </Marker>\n          ) : (\n            \"\"\n          )}\n          <MarkerClusterGroup>\n            {\n              this.state.images.length > 0 && this.state.images.map(image => (\n                <Marker\n                  key={image._id}\n                  position={[image.latitude, image.longitude]}\n                  icon={gpsDirectionMarker}\n                  rotationAngle={image.GPSImgDirection}>\n                  <Popup>\n                    <b>Prosjekt: </b>{image.prosjekt} {image.prosjektOmrade}<p/>\n                    <b>Parsell: </b>{image.parsell}<p/>\n                    <b>Kategori: </b>{image.kategori}<p/>\n                    <b>Høydemeter: </b>{image.GPSAltitude}<p/>\n                    <b>Dato tatt: </b>{image.captureDate}<p/>\n                    <img src={`${getPictures(image.imageName)}`} alt={image.imageName} className=\"popupImage\"/>\n                  </Popup>\n                </Marker>\n              ))}\n          </MarkerClusterGroup>\n\n          <Polygon\n            onclick={() =>\n              this.setState({\n                location: {\n                  lat: 63.55144,\n                  lng: 10.933473,\n                },\n                zoom: 11,\n              })\n            }\n            color={\"blue\"}\n            positions={polygonE6KAA}\n          />\n          <Polygon\n            onclick={() =>\n              this.setState({\n                location: {\n                  lat: 59.001439,\n                  lng: 9.613338,\n                },\n                zoom: 11,\n              })\n            }\n            color={\"#d46504\"}\n            positions={polygonE18RD}\n          />\n          <Polygon\n            onclick={() =>\n              this.setState({\n                location: {\n                  lat: 58.093886,\n                  lng: 7.644329,\n                },\n                zoom: 11,\n              })\n            }\n            color={\"blue\"}\n            positions={polygonE39M}\n          />\n        </Map>\n\n        <Card className=\"message-form\">\n          <CardTitle className=\"title\">Bildelagring</CardTitle>\n          <Tabs>\n            <TabList>\n              <Tab>Søk i Bilder</Tab>\n              <Tab>Last opp Bilder</Tab>\n            </TabList>\n\n            <TabPanel>\n              <p>\n                <b>Velg verdier for søket ditt</b>\n              </p>\n              <OverlayInfo />\n              <Select\n                className=\"select-option\"\n                value={selectedOption}\n                onChange={this.handleChange}\n                options={projectOptions}\n                placeholder=\"velg prosjekt\"\n                menuColor=\"blue\"\n              />            \n              <MultiSelectTooltip />\n              <MultiSelect className=\"multi-select\" />\n              <DateTooltip />\n              <Datepicker \n                images={this.images}\n              />\n            </TabPanel>\n            <TabPanel>\n              <CardText> <b>Last oppp bilder:</b></CardText>\n              <UploadImageForm />\n            </TabPanel>\n          </Tabs>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'leaflet/dist/leaflet.css';\nimport 'react-leaflet-markercluster/dist/styles.min.css';\nimport 'react-tabs/style/react-tabs.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}